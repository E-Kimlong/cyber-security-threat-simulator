
import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Scan, AlertCircle, CheckCircle, XCircle } from "lucide-react";

interface Vulnerability {
  id: string;
  type: string;
  severity: "Critical" | "High" | "Medium" | "Low";
  description: string;
  port?: number;
  service?: string;
}

export const VulnerabilityScanner = () => {
  const [target, setTarget] = useState("");
  const [scanning, setScanning] = useState(false);
  const [progress, setProgress] = useState(0);
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);

  const mockVulnerabilities: Vulnerability[] = [
    {
      id: "1",
      type: "Open Port",
      severity: "High",
      description: "SSH port 22 is open with weak authentication",
      port: 22,
      service: "SSH"
    },
    {
      id: "2",
      type: "Outdated Software",
      severity: "Critical",
      description: "Apache HTTP Server 2.2.15 has known vulnerabilities",
      port: 80,
      service: "HTTP"
    },
    {
      id: "3",
      type: "Misconfiguration",
      severity: "Medium",
      description: "Directory listing enabled on web server",
      port: 80,
      service: "HTTP"
    },
    {
      id: "4",
      type: "SSL/TLS Issue",
      severity: "Low",
      description: "Weak cipher suites detected",
      port: 443,
      service: "HTTPS"
    }
  ];

  const startScan = async () => {
    if (!target) return;
    
    setScanning(true);
    setProgress(0);
    setVulnerabilities([]);

    // Simulate scanning progress
    for (let i = 0; i <= 100; i += 10) {
      await new Promise(resolve => setTimeout(resolve, 200));
      setProgress(i);
    }

    setVulnerabilities(mockVulnerabilities);
    setScanning(false);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "Critical": return "bg-red-600";
      case "High": return "bg-orange-600";
      case "Medium": return "bg-yellow-600";
      case "Low": return "bg-blue-600";
      default: return "bg-slate-600";
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "Critical":
      case "High":
        return <XCircle className="w-4 h-4 text-red-400" />;
      case "Medium":
        return <AlertCircle className="w-4 h-4 text-yellow-400" />;
      case "Low":
        return <CheckCircle className="w-4 h-4 text-blue-400" />;
      default:
        return <AlertCircle className="w-4 h-4 text-slate-400" />;
    }
  };

  return (
    <div className="space-y-6">
      <Card className="bg-slate-800 border-slate-700">
        <CardHeader>
          <CardTitle className="text-green-400 flex items-center">
            <Scan className="w-5 h-5 mr-2" />
            Vulnerability Scanner
          </CardTitle>
          <CardDescription className="text-slate-400">
            Scan target systems for security vulnerabilities and misconfigurations
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex gap-4">
            <Input
              placeholder="Enter target IP or domain (e.g., 192.168.1.1)"
              value={target}
              onChange={(e) => setTarget(e.target.value)}
              className="bg-slate-700 border-slate-600 text-green-400"
            />
            <Button 
              onClick={startScan} 
              disabled={scanning || !target}
              className="bg-green-600 hover:bg-green-700"
            >
              {scanning ? "Scanning..." : "Start Scan"}
            </Button>
          </div>

          {scanning && (
            <div className="space-y-2">
              <div className="flex justify-between text-sm text-slate-400">
                <span>Scanning progress</span>
                <span>{progress}%</span>
              </div>
              <Progress value={progress} className="bg-slate-700" />
            </div>
          )}
        </CardContent>
      </Card>

      {vulnerabilities.length > 0 && (
        <Card className="bg-slate-800 border-slate-700">
          <CardHeader>
            <CardTitle className="text-red-400">
              Vulnerabilities Found ({vulnerabilities.length})
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {vulnerabilities.map((vuln) => (
                <div
                  key={vuln.id}
                  className="p-4 bg-slate-700 rounded-lg border border-slate-600"
                >
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-3">
                      {getSeverityIcon(vuln.severity)}
                      <span className="font-medium text-slate-200">{vuln.type}</span>
                    </div>
                    <Badge className={`${getSeverityColor(vuln.severity)} text-white`}>
                      {vuln.severity}
                    </Badge>
                  </div>
                  <p className="text-slate-400 mb-2">{vuln.description}</p>
                  {vuln.port && (
                    <div className="flex gap-4 text-sm text-slate-500">
                      <span>Port: {vuln.port}</span>
                      <span>Service: {vuln.service}</span>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
};
